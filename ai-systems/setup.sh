#!/bin/bash

# AI-SYSTEMS Setup Script
# This script initializes the AI-SYSTEMS environment, creates necessary directories,
# and sets up the configuration for all services.

# Set colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

echo -e "${GREEN}Initializing AI-SYSTEMS environment...${NC}"

# Make script executable
chmod +x run_services.sh
chmod +x stop_services.sh
chmod +x git-service/stop_git_service.sh

# Create necessary directories
echo -e "${YELLOW}Creating necessary directories...${NC}"
mkdir -p logs
mkdir -p ~/workspace/AI-SYSTEMS-REPO

# Ensure .env file exists
if [ ! -f ".env" ]; then
    echo -e "${YELLOW}Creating .env file from example...${NC}"
    cp .env.example .env
    echo -e "${YELLOW}Please edit the .env file and add your API keys and other configurations.${NC}"
else
    echo -e "${YELLOW}.env file already exists.${NC}"
fi

# Update .env with correct paths
sed -i 's|LOG_FILE_PATH=.*|LOG_FILE_PATH=./logs/web-backend.log|g' .env
sed -i 's|LOGS_DIR=.*|LOGS_DIR=./logs|g' .env
sed -i 's|REPOSITORY_PATH=.*|REPOSITORY_PATH=~/workspace/AI-SYSTEMS-REPO|g' .env

# Update config.js for frontend
echo -e "${YELLOW}Updating frontend configuration...${NC}"
cat > web/frontend/src/config.js << EOF
// This file is auto-generated by the setup.sh script
// It contains the configuration for the frontend application

const config = {
  // API endpoints
  apiBaseUrl: 'http://localhost:\${WEB_PORT:-8000}',
  wsBaseUrl: 'ws://localhost:\${WEB_PORT:-8000}',
  
  // Service endpoints
  services: {
    aiCore: 'http://localhost:\${AI_CORE_PORT:-7861}',
    developmentAgents: 'http://localhost:\${DEV_AGENTS_PORT:-7862}',
    projectManager: 'http://localhost:\${PROJECT_MANAGER_PORT:-7863}',
    cmp: 'http://localhost:\${CMP_PORT:-7864}',
    gitService: 'http://localhost:\${GIT_SERVICE_PORT:-7865}'
  }
};

export default config;
EOF

# Load environment variables
echo -e "${YELLOW}Loading environment variables...${NC}"
set -a
source .env 2>/dev/null || true
set +a

# Update environment variables
echo -e "${YELLOW}Setting up environment variables for repository...${NC}"
cd ~/workspace/AI-SYSTEMS-REPO || mkdir -p ~/workspace/AI-SYSTEMS-REPO
if [ -d ".git" ]; then
    echo -e "${YELLOW}Git repository already initialized.${NC}"
else
    echo -e "${YELLOW}Initializing Git repository...${NC}"
    git init
    git config user.name "${GIT_USER_NAME:-AI-SYSTEMS}"
    git config user.email "${GIT_USER_EMAIL:-ai-systems@example.com}"
    
    # Create basic README.md if it doesn't exist
    if [ ! -f "README.md" ]; then
        echo "# AI-SYSTEMS Repository" > README.md
        echo "" >> README.md
        echo "This repository contains code generated by the AI-SYSTEMS platform." >> README.md
        echo "" >> README.md
        echo "## Structure" >> README.md
        echo "" >> README.md
        echo "- \`src/\`: Source code" >> README.md
        echo "- \`tests/\`: Test files" >> README.md
        echo "" >> README.md
        echo "Generated on: $(date)" >> README.md
        
        git add README.md
        git commit -m "Initial commit: Add README.md"
    fi
    
    # Create basic structure
    mkdir -p src
    mkdir -p tests
    
    # Add .gitignore
    echo "# General" > .gitignore
    echo ".DS_Store" >> .gitignore
    echo ".env" >> .gitignore
    echo "*.log" >> .gitignore
    echo "" >> .gitignore
    echo "# Python" >> .gitignore
    echo "__pycache__/" >> .gitignore
    echo "*.py[cod]" >> .gitignore
    echo "*$py.class" >> .gitignore
    echo "venv/" >> .gitignore
    echo ".venv/" >> .gitignore
    echo "env/" >> .gitignore
    echo "ENV/" >> .gitignore
    
    git add .gitignore
    git commit -m "Add .gitignore file"
    
    # Add empty src and tests directories with placeholder files
    echo "# Source code package" > src/__init__.py
    echo "# Test package" > tests/__init__.py
    
    git add src/__init__.py tests/__init__.py
    git commit -m "Add basic directory structure"
    
    # Connect to remote repository if GitHub token is provided
    if [ ! -z "${GITHUB_TOKEN}" ] && [ ! -z "${GITHUB_REPO}" ]; then
        echo -e "${YELLOW}Setting up remote repository...${NC}"
        REPO_URL="https://${GITHUB_TOKEN}@github.com/${GITHUB_REPO}.git"
        git remote add origin "${REPO_URL}"
        
        # Use the branch name from environment or default to master
        BRANCH_NAME="${MAIN_BRANCH:-master}"
        echo -e "${YELLOW}Using branch name: $BRANCH_NAME${NC}"
        
        # Try to push, but don't fail if it doesn't work
        git push -u origin "$BRANCH_NAME" || echo -e "${YELLOW}Initial push failed. You may need to run sync_repo.sh later.${NC}"
    else
        echo -e "${YELLOW}No GitHub token or repo provided. Skip remote setup.${NC}"
    fi
fi

# Return to the AI-SYSTEMS directory
cd - || return

echo -e "${GREEN}AI-SYSTEMS environment setup complete!${NC}"
echo -e "${GREEN}You can now run ./run_services.sh to start all services.${NC}"
