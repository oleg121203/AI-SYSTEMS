import React, { useState, useEffect } from 'react';
import {
  Box,
  Card,
  CardContent,
  CardHeader,
  CircularProgress,
  FormControl,
  Grid,
  InputLabel,
  MenuItem,
  Select,
  Tooltip,
  Typography,
  Alert,
  Divider,
  Button
} from '@mui/material';
import CheckIcon from '@mui/icons-material/Check';
import CloseIcon from '@mui/icons-material/Close';
import ErrorIcon from '@mui/icons-material/Error';
import WarningIcon from '@mui/icons-material/Warning';
import SmartToyIcon from '@mui/icons-material/SmartToy';
import SaveIcon from '@mui/icons-material/Save';
import config from '../config';
import CheckCircleIcon from '@mui/icons-material/CheckCircle';
import SmartToyIcon from '@mui/icons-material/SmartToy';
import KeyIcon from '@mui/icons-material/Key';
import config from '../config';

/**
 * AIModelSelector component allows selecting AI providers and models for each AI agent
 * @param {Object} props - Component props
 * @param {Function} props.onConfigUpdate - Function to call when configuration is updated
 * @param {Object} props.initialConfig - Initial AI configuration
 * @param {Boolean} props.loading - Whether the component is loading data
 */
const AIModelSelector = ({ onConfigUpdate, initialConfig, loading = false }) => {
  const [providers, setProviders] = useState({});
  const [selectedProviders, setSelectedProviders] = useState({
    ai1: '',
    ai2_executor: '',
    ai2_tester: '',
    ai2_documenter: '',
    ai3: ''
  });
  const [selectedModels, setSelectedModels] = useState({
    ai1: '',
    ai2_executor: '',
    ai2_tester: '',
    ai2_documenter: '',
    ai3: ''
  });
  const [selectedApiKeys, setSelectedApiKeys] = useState({
    ai1: '',
    ai2_executor: '',
    ai2_tester: '',
    ai2_documenter: '',
    ai3: ''
  });
  const [availableModels, setAvailableModels] = useState({});
  const [error, setError] = useState(null);

  // Fetch available providers on component mount
  useEffect(() => {
    const fetchProviders = async () => {
      try {
        const response = await fetch(`${config.apiBaseUrl}/api/providers`);
        if (!response.ok) {
          throw new Error(`Error fetching providers: ${response.statusText}`);
        }
        const data = await response.json();
        setProviders(data);
        
        // Initialize with initial config if available
        if (initialConfig) {
          const providerConfig = {};
          const modelConfig = {};
          
          Object.keys(initialConfig).forEach(aiKey => {
            if (initialConfig[aiKey]?.provider) {
              providerConfig[aiKey] = initialConfig[aiKey].provider;
              modelConfig[aiKey] = initialConfig[aiKey].model || '';
              
              // Initialize API key selection if available
              if (initialConfig[aiKey]?.apiKey) {
                setSelectedApiKeys(prev => ({
                  ...prev,
                  [aiKey]: initialConfig[aiKey].apiKey
                }));
              }
            }
          });
          
          setSelectedProviders(prevState => ({
            ...prevState,
            ...providerConfig
          }));
          
          setSelectedModels(prevState => ({
            ...prevState,
            ...modelConfig
          }));
          
          // Fetch models for each selected provider
          Object.entries(providerConfig).forEach(([aiKey, provider]) => {
            fetchModelsForProvider(provider, aiKey);
          });
        }
      } catch (err) {
        console.error('Failed to fetch providers:', err);
        setError('Failed to load AI providers. Please try again later.');
      }
    };
    
    fetchProviders();
  }, [initialConfig]);

  // Fetch available models for a provider
  const [modelAvailability, setModelAvailability] = useState({});
  const [checkingAvailability, setCheckingAvailability] = useState({});

  const [modelDetails, setModelDetails] = useState({});
  const [apiKeyStatus, setApiKeyStatus] = useState({});

  const fetchModelsForProvider = async (provider, aiKey, apiKey = null) => {
    if (!provider) return;
    
    try {
      // First fetch the basic model list
      const response = await fetch(`${config.apiBaseUrl}/api/providers/${provider}/models`);
      if (!response.ok) {
        throw new Error(`Error fetching models: ${response.statusText}`);
      }
      const data = await response.json();
      
      setAvailableModels(prevModels => ({
        ...prevModels,
        [aiKey]: data.models || []
      }));
      
      // If we have an API key, check availability of each model
      if (apiKey) {
        setCheckingAvailability(prev => ({ ...prev, [aiKey]: true }));
        
        try {
          const availabilityResponse = await fetch(
            `${config.apiBaseUrl}/api/providers/${provider}/models?check_availability=true&api_key=${encodeURIComponent(apiKey)}`
          );
          
          if (availabilityResponse.ok) {
            const availabilityData = await availabilityResponse.json();
            
            // Update API key status
            setApiKeyStatus(prev => ({
              ...prev,
              [aiKey]: {
                valid: availabilityData.api_key_valid,
                rateLimited: availabilityData.rate_limited,
                checkTime: availabilityData.check_time
              }
            }));
            
            // Update model availability state
            setModelAvailability(prev => ({
              ...prev,
              [aiKey]: availabilityData.models.reduce((acc, model) => {
                acc[model.id] = model.available;
                return acc;
              }, {})
            }));
            
            // Update model details
            setModelDetails(prev => ({
              ...prev,
              [aiKey]: availabilityData.models.reduce((acc, model) => {
                acc[model.id] = {
                  details: model.details,
                  latency: model.latency,
                  category: model.category,
                  capabilities: model.capabilities || []
                };
                return acc;
              }, {})
            }));
            
            // Update available models with the enhanced data
            setAvailableModels(prevModels => ({
              ...prevModels,
              [aiKey]: availabilityData.models
            }));
          }
        } catch (availabilityErr) {
          console.error(`Failed to check model availability for ${provider}:`, availabilityErr);
          setError(`Failed to check model availability for ${provider}. ${availabilityErr.message}`);
        } finally {
          setCheckingAvailability(prev => ({ ...prev, [aiKey]: false }));
        }
      }
    } catch (err) {
      console.error(`Failed to fetch models for ${provider}:`, err);
      setError(`Failed to load models for ${provider}. Please try again later.`);
    }
  };

  // Add state to track unsaved changes
  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);

  // Handle provider selection change
  const handleProviderChange = async (event, aiKey) => {
    const provider = event.target.value;
    
    setSelectedProviders(prevState => ({
      ...prevState,
      [aiKey]: provider
    }));
    
    // Reset selected model when provider changes
    setSelectedModels(prevState => ({
      ...prevState,
      [aiKey]: ''
    }));
    
    // Reset selected API key when provider changes
    setSelectedApiKeys(prevState => ({
      ...prevState,
      [aiKey]: ''
    }));
    
    // Fetch models for the selected provider
    await fetchModelsForProvider(provider, aiKey);
    
    // Mark that we have unsaved changes
    setHasUnsavedChanges(true);
  };

  // Handle model selection change
  const handleModelChange = async (event, aiKey) => {
    const model = event.target.value;
    
    setSelectedModels(prevState => ({
      ...prevState,
      [aiKey]: model
    }));
    
    // Mark that we have unsaved changes
    setHasUnsavedChanges(true);
  };

  // Handle API key selection change
  const handleApiKeyChange = async (event, aiKey) => {
    const apiKey = event.target.value;
    
    setSelectedApiKeys(prevState => ({
      ...prevState,
      [aiKey]: apiKey
    }));
    
    // Fetch models with availability check when API key changes
    if (apiKey && selectedProviders[aiKey]) {
      await fetchModelsForProvider(selectedProviders[aiKey], aiKey, apiKey);
    }
    
    // Mark that we have unsaved changes
    setHasUnsavedChanges(true);
  };

  // Helper function to create updated config object
  const createUpdatedConfig = (aiKey, change) => {
    // Start with the current configuration
    const currentConfig = {};
    
    // Add current selections to the config
    Object.keys(selectedProviders).forEach(key => {
      if (selectedProviders[key]) {
        currentConfig[key] = {
          provider: selectedProviders[key],
          model: selectedModels[key] || '',
          apiKey: selectedApiKeys[key] || ''
        };
      }
    });
    
    // Update the specific AI agent's config
    currentConfig[aiKey] = change;
    
    return currentConfig;
  };
  
  // AI agent descriptions
  const aiDescriptions = {
    ai1: 'Project Coordinator - Formulates tasks and tracks progress',
    ai2_executor: 'Code Generator - Implements files according to requirements',
    ai2_tester: 'Test Writer - Creates tests for implemented code',
    ai2_documenter: 'Documentation Generator - Creates documentation for code',
    ai3: 'Project Manager - Generates project structure and monitors progress'
  };

  // Display names for AI agents
  const aiDisplayNames = {
    ai1: 'AI1 - Coordinator',
    ai2_executor: 'AI2 - Executor',
    ai2_tester: 'AI2 - Tester',
    ai2_documenter: 'AI2 - Documenter',
    ai3: 'AI3 - Project Manager'
  };

  if (loading) {
    return (
      <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>
        <CircularProgress />
      </Box>
    );
  }

  // Handle save button click
  const handleSaveConfig = () => {
    // Create the complete configuration object
    const completeConfig = {};
    
    // Add current selections to the config
    Object.keys(selectedProviders).forEach(key => {
      if (selectedProviders[key]) {
        completeConfig[key] = {
          provider: selectedProviders[key],
          model: selectedModels[key] || '',
          apiKey: selectedApiKeys[key] || ''
        };
      }
    });
    
    // Notify parent component about the configuration update
    onConfigUpdate(completeConfig);
    
    // Reset the unsaved changes flag
    setHasUnsavedChanges(false);
  };

  return (
    <Box>
              <CardHeader
                avatar={<SmartToyIcon />}
                title={aiDisplayNames[aiKey]}
                subheader={aiDescriptions[aiKey]}
              />
              <Divider />
              <CardContent>
                <Box sx={{ mb: 2 }}>
                  <FormControl fullWidth>
                    <InputLabel>Provider</InputLabel>
                    <Select
                      value={selectedProviders[aiKey] || ''}
                      onChange={(e) => handleProviderChange(e, aiKey)}
                      label="Provider"
                    >
                      <MenuItem value="">
                        <em>Select a provider</em>
                      </MenuItem>
                      {Object.keys(providers).map((provider) => (
                        <MenuItem key={provider} value={provider}>
                          {providers[provider]?.name || provider}
                          {providers[provider]?.configured && (
                            <Tooltip title="API key configured" placement="right">
                              <KeyIcon fontSize="small" color="success" sx={{ ml: 1 }} />
                            </Tooltip>
                          )}
                        </MenuItem>
                      ))}
                    </Select>
                  </FormControl>
                </Box>
                
                {selectedProviders[aiKey] && providers[selectedProviders[aiKey]]?.api_keys?.length > 0 && (
                  <Box sx={{ mb: 2 }}>
                    <FormControl fullWidth sx={{ mb: 2 }}>
                      <InputLabel 
                        id={`api-key-label-${aiKey}`}
                        error={apiKeyStatus[aiKey]?.valid === false}
                      >
                        API Key
                      </InputLabel>
                      <Select
                        labelId={`api-key-label-${aiKey}`}
                        id={`api-key-select-${aiKey}`}
                        value={selectedApiKeys[aiKey] || ''}
                        label="API Key"
                        onChange={(e) => handleApiKeyChange(e, aiKey)}
                        error={apiKeyStatus[aiKey]?.valid === false}
                        endAdornment={
                          apiKeyStatus[aiKey] && (
                            <Box sx={{ position: 'absolute', right: 32, display: 'flex', alignItems: 'center' }}>
                              {apiKeyStatus[aiKey].valid === false ? (
                                <Tooltip title="Invalid API key">
                                  <ErrorIcon color="error" fontSize="small" />
                                </Tooltip>
                              ) : apiKeyStatus[aiKey].rateLimited ? (
                                <Tooltip title="Rate limited">
                                  <WarningIcon color="warning" fontSize="small" />
                                </Tooltip>
                              ) : apiKeyStatus[aiKey].valid ? (
                                <Tooltip title="API key valid">
                                  <CheckCircleIcon color="success" fontSize="small" />
                                </Tooltip>
                              ) : null}
                            </Box>
                          )
                        }
                      >
                        <MenuItem value="">
                          <em>Select an API key</em>
                        </MenuItem>
                        {providers[selectedProviders[aiKey]]?.api_keys.map((keyInfo, index) => (
                          <MenuItem key={index} value={keyInfo.key}>
                            {keyInfo.name}
                          </MenuItem>
                        ))}
                      </Select>
                      {apiKeyStatus[aiKey]?.checkTime && (
                        <Typography variant="caption" color="text.secondary" sx={{ mt: 0.5, display: 'block' }}>
                          Last checked: {apiKeyStatus[aiKey].checkTime}
                        </Typography>
                      )}
                    </FormControl>
                  </Box>
                )}
                
                <Box>
                  <FormControl fullWidth disabled={!selectedProviders[aiKey]}>
                    <InputLabel>Model</InputLabel>
                    <Select
                      value={selectedModels[aiKey] || ''}
                      onChange={(e) => handleModelChange(e, aiKey)}
                      label="Model"
                    >
                      <MenuItem value="">
                        <em>Select a model</em>
                      </MenuItem>
                      {availableModels[aiKey]?.map((model) => {
                        // If it's a string (old format), use it directly
                        const modelId = typeof model === 'string' ? model : model.id;
                        const isAvailable = modelAvailability[aiKey]?.[modelId] !== false; // Default to true if not checked
                        const isChecking = checkingAvailability[aiKey];
                        const details = modelDetails[aiKey]?.[modelId] || {};
                        const capabilities = details.capabilities || [];
                        const category = details.category || 'standard';
                        const latency = details.latency;
                        const statusDetails = details.details;
                        
                        // Determine model badge color based on category
                        const categoryColor = category === 'advanced' ? 'primary.dark' : 'info.main';
                        
                        return (
                          <MenuItem 
                            key={modelId} 
                            value={modelId}
                            disabled={modelAvailability[aiKey] && !isAvailable}
                            sx={{
                              display: 'flex',
                              flexDirection: 'column',
                              alignItems: 'stretch',
                              py: 1.5,
                              px: 2,
                              borderLeft: isAvailable ? '3px solid' : 'none',
                              borderLeftColor: 'success.main',
                              transition: 'all 0.2s ease',
                              '&:hover': {
                                backgroundColor: 'rgba(99, 102, 241, 0.08)'
                              },
                              ...(selectedModels[aiKey] === modelId && {
                                backgroundColor: 'rgba(99, 102, 241, 0.12)',
                                fontWeight: 'bold'
                              })
                            }}
                          >
                            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', width: '100%' }}>
                              <Box sx={{ display: 'flex', alignItems: 'center' }}>
                                <Typography variant="body1" fontWeight={category === 'advanced' ? 'bold' : 'normal'}>
                                  {modelId}
                                </Typography>
                                <Tooltip title={`${category.charAt(0).toUpperCase() + category.slice(1)} model`}>
                                  <Box 
                                    component="span"
                                    sx={{ 
                                      ml: 1, 
                                      px: 1, 
                                      py: 0.2, 
                                      borderRadius: 1, 
                                      fontSize: '0.7rem',
                                      backgroundColor: categoryColor,
                                      color: 'white'
                                    }}
                                  >
                                    {category.toUpperCase()}
                                  </Box>
                                </Tooltip>
                              </Box>
                              
                              {modelAvailability[aiKey] ? (
                                <Box sx={{ 
                                  display: 'flex', 
                                  alignItems: 'center',
                                  justifyContent: 'center',
                                  minWidth: 30
                                }}>
                                  {isChecking ? (
                                    <CircularProgress size={16} thickness={6} />
                                  ) : isAvailable ? (
                                    <Tooltip title={statusDetails || "Model is available"}>
                                      <Box 
                                        sx={{ 
                                          display: 'flex',
                                          alignItems: 'center',
                                          justifyContent: 'center',
                                          width: 24, 
                                          height: 24, 
                                          borderRadius: '50%', 
                                          bgcolor: 'success.main',
                                          color: 'white',
                                          boxShadow: '0 2px 4px rgba(0,0,0,0.2)'
                                        }}
                                      >
                                        <CheckIcon fontSize="small" />
                                      </Box>
                                    </Tooltip>
                                  ) : (
                                    <Tooltip title={statusDetails || "Model is not available"}>
                                      <Box 
                                        sx={{ 
                                          display: 'flex',
                                          alignItems: 'center',
                                          justifyContent: 'center',
                                          width: 24, 
                                          height: 24, 
                                          borderRadius: '50%', 
                                          bgcolor: 'error.main',
                                          color: 'white',
                                          boxShadow: '0 2px 4px rgba(0,0,0,0.2)'
                                        }}
                                      >
                                        <CloseIcon fontSize="small" />
                                      </Box>
                                    </Tooltip>
                                  )}
                                </Box>
                              ) : null}
                            </Box>
                            
                            {/* Capabilities section */}
                            {capabilities.length > 0 && (
                              <Box sx={{ mt: 1, display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>
                                {capabilities.map(capability => (
                                  <Tooltip key={capability} title={`Supports ${capability}`}>
                                    <Box
                                      sx={{
                                        px: 1,
                                        py: 0.2,
                                        borderRadius: 4,
                                        fontSize: '0.65rem',
                                        backgroundColor: 'rgba(99, 102, 241, 0.1)',
                                        color: 'text.secondary',
                                        border: '1px solid rgba(99, 102, 241, 0.2)',
                                      }}
                                    >
                                      {capability}
                                    </Box>
                                  </Tooltip>
                                ))}
                                {latency && (
                                  <Tooltip title="Response time in milliseconds">
                                    <Box
                                      sx={{
                                        px: 1,
                                        py: 0.2,
                                        borderRadius: 4,
                                        fontSize: '0.65rem',
                                        backgroundColor: 'rgba(16, 185, 129, 0.1)',
                                        color: 'text.secondary',
                                        border: '1px solid rgba(16, 185, 129, 0.2)',
                                        display: 'flex',
                                        alignItems: 'center',
                                        gap: 0.5
                                      }}
                                    >
                                      <Box component="span" sx={{ fontSize: '0.6rem' }}>⚡</Box>
                                      {latency}ms
                                    </Box>
                                  </Tooltip>
                                )}
                              </Box>
                            )}
                          </MenuItem>
                        );
                      })}
                    </Select>
                  </FormControl>
                </Box>
              </CardContent>
            </Card>
          </Grid>
        ))}
      </Grid>
    </Box>
  );
};

export default AIModelSelector;
