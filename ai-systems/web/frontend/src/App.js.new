import React, { useState, useEffect, useCallback, useRef } from 'react';
import {
  AppBar,
  Box,
  Button,
  Card,
  CardActions,
  CardContent,
  Chip,
  CircularProgress,
  Container,
  CssBaseline,
  Dialog,
  DialogActions,
  DialogContent,
  DialogContentText,
  DialogTitle,
  Divider,
  Drawer,
  Grid,
  IconButton,
  LinearProgress,
  Link,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Paper,
  Snackbar,
  Tab,
  Tabs,
  TextField,
  Toolbar,
  Typography,
  useTheme
} from '@mui/material';

// Icons
import AddIcon from '@mui/icons-material/Add';
import CodeIcon from '@mui/icons-material/Code';
import DashboardIcon from '@mui/icons-material/Dashboard';
import DescriptionIcon from '@mui/icons-material/Description';
import FolderIcon from '@mui/icons-material/Folder';
import MenuIcon from '@mui/icons-material/Menu';
import MonitorIcon from '@mui/icons-material/Monitor';
import PlayArrowIcon from '@mui/icons-material/PlayArrow';
import RefreshIcon from '@mui/icons-material/Refresh';
import SettingsIcon from '@mui/icons-material/Settings';
import TaskIcon from '@mui/icons-material/Task';

// Custom components
import ProjectCard from './components/ProjectCard';
import TaskList from './components/TaskList';
import SystemStatus from './components/SystemStatus';
import MonitoringDashboard from './components/MonitoringDashboard';
import AIModelSelector from './components/AIModelSelector';
import WorkflowVisualizer from './components/WorkflowVisualizer';
import PerformanceDashboard from './components/PerformanceDashboard';

// Styles
import { ThemeProvider, createTheme } from '@mui/material/styles';
import './App.css';

// Create theme
const darkTheme = createTheme({
  palette: {
    mode: 'dark',
    primary: {
      main: '#6366f1', // Indigo
      light: '#818cf8',
      dark: '#4f46e5',
    },
    secondary: {
      main: '#ec4899', // Pink
      light: '#f472b6',
      dark: '#db2777',
    },
    success: {
      main: '#10b981', // Emerald
      light: '#34d399',
      dark: '#059669',
    },
    error: {
      main: '#ef4444', // Red
      light: '#f87171',
      dark: '#dc2626',
    },
    warning: {
      main: '#f59e0b', // Amber
      light: '#fbbf24',
      dark: '#d97706',
    },
    info: {
      main: '#3b82f6', // Blue
      light: '#60a5fa',
      dark: '#2563eb',
    },
    background: {
      default: '#0f172a', // Slate 900
      paper: '#1e293b', // Slate 800
    },
    text: {
      primary: '#f8fafc', // Slate 50
      secondary: '#cbd5e1', // Slate 300
    },
  },
  typography: {
    fontFamily: '"Inter", "Roboto", "Helvetica", "Arial", sans-serif',
    h1: {
      fontWeight: 700,
    },
    h2: {
      fontWeight: 700,
    },
    h3: {
      fontWeight: 600,
    },
    h4: {
      fontWeight: 600,
    },
    h5: {
      fontWeight: 600,
    },
    h6: {
      fontWeight: 600,
    },
    button: {
      fontWeight: 600,
      textTransform: 'none',
    },
  },
  shape: {
    borderRadius: 10,
  },
  components: {
    MuiButton: {
      styleOverrides: {
        root: {
          borderRadius: 8,
          padding: '8px 16px',
          boxShadow: 'none',
          '&:hover': {
            boxShadow: '0 4px 8px rgba(0, 0, 0, 0.2)',
          },
        },
      },
    },
    MuiCard: {
      styleOverrides: {
        root: {
          borderRadius: 12,
          boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',
        },
      },
    },
    MuiPaper: {
      styleOverrides: {
        root: {
          borderRadius: 12,
        },
      },
    },
  },
});

function App() {
  // State for projects and tasks
  const [projects, setProjects] = useState([]);
  const [selectedProject, setSelectedProject] = useState(null);
  const [projectTasks, setProjectTasks] = useState([]);
  
  // AI configuration state
  const [aiConfig, setAIConfig] = useState(null);
  const [aiConfigLoading, setAIConfigLoading] = useState(false);
  
  // UI state
  const [loading, setLoading] = useState({
    projects: true,
    tasks: false,
    system: true
  });
  const [error, setError] = useState(null);
  const [currentTab, setCurrentTab] = useState(0);
  const [drawerOpen, setDrawerOpen] = useState(false);
  const [systemStatus, setSystemStatus] = useState(null);
  const [notification, setNotification] = useState({
    open: false,
    message: '',
    severity: 'info'
  });
  
  // Project creation state
  const [newProjectDialog, setNewProjectDialog] = useState(false);
  const [newProject, setNewProject] = useState({
    name: '',
    description: '',
    repository_url: '',
    idea_md: ''
  });
  
  // WebSocket state
  const ws = useRef(null);
  const reconnectAttempts = useRef(0);
  const maxReconnectAttempts = 5;
  
  // Initialize WebSocket connection
  const connectWebSocket = useCallback(() => {
    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
    const wsUrl = `${protocol}//${window.location.host}/ws`;
    
    ws.current = new WebSocket(wsUrl);
    
    ws.current.onopen = () => {
      console.log('WebSocket connected');
      reconnectAttempts.current = 0;
      
      // Send ping to keep connection alive
      const pingInterval = setInterval(() => {
        if (ws.current && ws.current.readyState === WebSocket.OPEN) {
          ws.current.send(JSON.stringify({ type: 'ping' }));
        } else {
          clearInterval(pingInterval);
        }
      }, 30000);
    };
    
    ws.current.onmessage = (event) => {
      const data = JSON.parse(event.data);
      console.log('WebSocket message:', data);
      
      switch (data.type) {
        case 'system_status':
          setSystemStatus(data.data);
          setLoading(prev => ({ ...prev, system: false }));
          break;
          
        case 'ai_config_update':
          setAIConfig(data.data);
          break;
          
        case 'project_update':
          // Refresh projects list when a project is updated
          fetchProjects();
          setNotification({
            open: true,
            message: `Project ${data.project_id}: ${data.message}`,
            severity: 'info'
          });
          break;
          
        case 'task_update':
          // Refresh tasks if the current project has a task update
          if (selectedProject && projectTasks.some(task => task.id === data.task_id)) {
            fetchProjectTasks(selectedProject.id);
          }
          break;
          
        case 'report':
          // Handle new report
          setNotification({
            open: true,
            message: `New report received: ${data.report.type} for ${data.report.file || 'project'}`,
            severity: 'info'
          });
          break;
          
        case 'pong':
          // Received pong from server
          console.log('Pong received from server');
          break;
          
        default:
          console.log('Unknown message type:', data.type);
      }
    };
    
    ws.current.onclose = () => {
      console.log('WebSocket disconnected');
      
      // Attempt to reconnect
      if (reconnectAttempts.current < maxReconnectAttempts) {
        reconnectAttempts.current += 1;
        setTimeout(() => {
          console.log(`Attempting to reconnect (${reconnectAttempts.current}/${maxReconnectAttempts})`);
          connectWebSocket();
        }, 5000);
      } else {
        setError('WebSocket connection lost. Please refresh the page.');
      }
    };
    
    ws.current.onerror = (error) => {
      console.error('WebSocket error:', error);
    };
  }, [selectedProject, projectTasks]);
  
  // Initialize app
  useEffect(() => {
    fetchProjects();
    fetchSystemStatus();
    connectWebSocket();
    
    return () => {
      if (ws.current) {
        ws.current.close();
      }
    };
  }, [connectWebSocket]);
  
  // Handle tab changes
  const handleTabChange = (event, newValue) => {
    setCurrentTab(newValue);
  };
  
  // Toggle drawer
  const handleDrawerToggle = () => {
    setDrawerOpen(!drawerOpen);
  };
  
  // Refresh data
  const handleRefresh = () => {
    switch (currentTab) {
      case 0:
        fetchProjects();
        break;
      case 1:
        if (selectedProject) {
          fetchProjectDetails(selectedProject.id);
        }
        break;
      case 2:
        fetchSystemStatus();
        break;
      default:
        break;
    }
  };
  
  // Close notification
  const handleCloseNotification = () => {
    setNotification(prev => ({ ...prev, open: false }));
  };
  
  // Handle project selection
  const handleProjectSelect = (projectId) => {
    fetchProjectDetails(projectId);
    setCurrentTab(1);
  };
  
  // Handle input changes for new project form
  const handleInputChange = (event) => {
    const { name, value } = event.target;
    setNewProject(prev => ({ ...prev, [name]: value }));
  };
  
  // Handle create plan
  const handleCreatePlan = (projectId) => {
    // TODO: Implement plan creation
    console.log('Create plan for project:', projectId);
  };
  
  // Update AI configuration
  const updateAIConfig = async (config) => {
    try {
      const response = await fetch('/api/config/ai', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(config),
      });
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      setNotification({
        open: true,
        message: "AI configuration updated successfully",
        severity: "success"
      });
    } catch (e) {
      console.error("Error updating AI configuration:", e);
      setNotification({
        open: true,
        message: "Failed to update AI configuration",
        severity: "error"
      });
    }
  };
  
  // API Functions
  const fetchProjects = async () => {
    try {
      setLoading(prev => ({ ...prev, projects: true }));
      const response = await fetch('/api/projects');
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const data = await response.json();
      setProjects(data);
      setError(null);
    } catch (e) {
      console.error("Error fetching projects:", e);
      setError("Failed to load projects. Please try again later.");
      setNotification({
        open: true,
        message: "Failed to load projects",
        severity: "error"
      });
    } finally {
      setLoading(prev => ({ ...prev, projects: false }));
    }
  };
  
  const fetchProjectDetails = async (projectId) => {
    try {
      const response = await fetch(`/api/projects/${projectId}`);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const data = await response.json();
      setSelectedProject(data);
      // Fetch tasks for this project
      fetchProjectTasks(projectId);
      
      // Subscribe to project updates via WebSocket
      if (ws.current && ws.current.readyState === WebSocket.OPEN) {
        ws.current.send(JSON.stringify({ 
          type: 'subscribe', 
          project_id: projectId 
        }));
      }
    } catch (e) {
      console.error("Error fetching project details:", e);
      setNotification({
        open: true,
        message: "Failed to load project details",
        severity: "error"
      });
    }
  };
  
  const fetchProjectTasks = async (projectId) => {
    try {
      setLoading(prev => ({ ...prev, tasks: true }));
      const response = await fetch(`/api/projects/${projectId}/tasks`);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const data = await response.json();
      setProjectTasks(data);
    } catch (e) {
      console.error("Error fetching project tasks:", e);
      setNotification({
        open: true,
        message: "Failed to load project tasks",
        severity: "error"
      });
    } finally {
      setLoading(prev => ({ ...prev, tasks: false }));
    }
  };
  
  const fetchSystemStatus = async () => {
    try {
      setLoading(prev => ({ ...prev, system: true }));
      const response = await fetch('/api/status');
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const data = await response.json();
      setSystemStatus(data);
    } catch (e) {
      console.error("Error fetching system status:", e);
      setNotification({
        open: true,
        message: "Failed to load system status",
        severity: "error"
      });
    } finally {
      setLoading(prev => ({ ...prev, system: false }));
    }
  };
  
  // Project Management Functions
  const handleCreateProject = async () => {
    try {
      const response = await fetch('/api/projects', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(newProject),
      });
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const createdProject = await response.json();
      setProjects([...projects, createdProject]);
      setNewProject({
        name: '',
        description: '',
        repository_url: '',
        idea_md: ''
      });
      setNewProjectDialog(false);
      
      setNotification({
        open: true,
        message: `Project ${createdProject.name} created successfully`,
        severity: "success"
      });
    } catch (e) {
      console.error("Error creating project:", e);
      setNotification({
        open: true,
        message: "Failed to create project",
        severity: "error"
      });
    }
  };
  
  const handleStartProject = async (projectId) => {
    try {
      const response = await fetch(`/api/projects/${projectId}/start`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        }
      });
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const result = await response.json();
      
      setNotification({
        open: true,
        message: result.message || "Project started successfully",
        severity: "success"
      });
      
      // Refresh project details
      fetchProjectDetails(projectId);
    } catch (e) {
      console.error("Error starting project:", e);
      setNotification({
        open: true,
        message: "Failed to start project",
        severity: "error"
      });
    }
  };
  
  // Function to render content based on selected tab
  const renderTabContent = () => {
    switch (currentTab) {
      case 0: // Projects
        return (
          <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
              <Typography variant="h4" gutterBottom>
                Projects
              </Typography>
              <Button
                variant="contained"
                color="primary"
                startIcon={<AddIcon />}
                onClick={() => setNewProjectDialog(true)}
              >
                New Project
              </Button>
            </Box>
            
            {loading.projects ? (
              <Box sx={{ display: 'flex', justifyContent: 'center', mt: 4 }}>
                <CircularProgress />
              </Box>
            ) : error ? (
              <Paper sx={{ p: 3, textAlign: 'center' }}>
                <Typography color="error">{error}</Typography>
              </Paper>
            ) : (
              <Grid container spacing={3}>
                {projects.map((project) => (
                  <Grid item xs={12} sm={6} md={4} key={project.id}>
                    <ProjectCard
                      project={project}
                      onSelect={() => handleProjectSelect(project.id)}
                      onStart={() => handleStartProject(project.id)}
                    />
                  </Grid>
                ))}
              </Grid>
            )}
          </Container>
        );
        
      case 1: // Project Details
        return (
          <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
            {selectedProject ? (
              <>
                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
                  <Typography variant="h4" gutterBottom>
                    {selectedProject.name}
                  </Typography>
                  
                  <Box>
                    {selectedProject.status === 'planning' && (
                      <Button
                        variant="contained"
                        color="primary"
                        startIcon={<PlayArrowIcon />}
                        onClick={() => handleStartProject(selectedProject.id)}
                        sx={{ mr: 1 }}
                      >
                        Start Project
                      </Button>
                    )}
                    
                    <Button
                      variant="outlined"
                      startIcon={<DescriptionIcon />}
                      onClick={() => handleCreatePlan(selectedProject.id)}
                    >
                      Generate Plan
                    </Button>
                  </Box>
                </Box>
                
                {/* Workflow Visualizer */}
                <WorkflowVisualizer 
                  tasks={projectTasks} 
                  loading={loading.tasks} 
                />
                
                <Paper sx={{ p: 3, mb: 3, boxShadow: 2 }}>
                  <Typography variant="h6" gutterBottom>
                    Project Details
                  </Typography>
                  
                  <Grid container spacing={2}>
                    <Grid item xs={12} md={6}>
                      <Typography variant="subtitle1">
                        Description
                      </Typography>
                      <Typography variant="body1" paragraph>
                        {selectedProject.description}
                      </Typography>
                      
                      {selectedProject.repository_url && (
                        <>
                          <Typography variant="subtitle1">
                            Repository
                          </Typography>
                          <Link href={selectedProject.repository_url} target="_blank" rel="noopener">
                            {selectedProject.repository_url}
                          </Link>
                        </>
                      )}
                    </Grid>
                    
                    <Grid item xs={12} md={6}>
                      <Typography variant="subtitle1">
                        Status
                      </Typography>
                      <Chip 
                        label={selectedProject.status.toUpperCase()} 
                        color={
                          selectedProject.status === 'completed' ? 'success' :
                          selectedProject.status === 'active' ? 'primary' :
                          selectedProject.status === 'paused' ? 'warning' :
                          'default'
                        }
                        sx={{ mb: 2 }}
                      />
                      
                      <Typography variant="subtitle1">
                        Progress
                      </Typography>
                      <Box sx={{ display: 'flex', alignItems: 'center' }}>
                        <Box sx={{ width: '100%', mr: 1 }}>
                          <LinearProgress 
                            variant="determinate" 
                            value={selectedProject.progress * 100} 
                            sx={{ height: 10, borderRadius: 5 }}
                          />
                        </Box>
                        <Box>
                          <Typography variant="body2" color="textSecondary">
                            {Math.round(selectedProject.progress * 100)}%
                          </Typography>
                        </Box>
                      </Box>
                      
                      <Typography variant="subtitle1" sx={{ mt: 2 }}>
                        Tasks
                      </Typography>
                      <Typography variant="body2">
                        {selectedProject.completed_tasks} / {selectedProject.task_count} completed
                      </Typography>
                    </Grid>
                  </Grid>
                </Paper>
                
                <Typography variant="h5" gutterBottom>
                  Tasks
                </Typography>
                
                {loading.tasks ? (
                  <Box sx={{ display: 'flex', justifyContent: 'center', mt: 4 }}>
                    <CircularProgress />
                  </Box>
                ) : (
                  <TaskList tasks={projectTasks} />
                )}
              </>
            ) : (
              <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '50vh' }}>
                <Typography variant="h6" color="textSecondary">
                  Select a project to view details
                </Typography>
              </Box>
            )}
          </Container>
        );
        
      case 2: // System Status
        return (
          <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
            <Typography variant="h4" gutterBottom>
              System Status
            </Typography>
            
            {loading.system ? (
              <Box sx={{ display: 'flex', justifyContent: 'center', mt: 4 }}>
                <CircularProgress />
              </Box>
            ) : (
              <SystemStatus status={systemStatus} />
            )}
          </Container>
        );
        
      case 3: // Monitoring
        return (
          <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
            <Typography variant="h4" gutterBottom>
              System Monitoring
            </Typography>
            
            {/* Use the new PerformanceDashboard component */}
            <PerformanceDashboard />
          </Container>
        );
        
      case 4: // AI Settings
        return (
          <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
            <Typography variant="h4" gutterBottom>
              AI Configuration
            </Typography>
            
            {aiConfigLoading ? (
              <Box sx={{ display: 'flex', justifyContent: 'center', mt: 4 }}>
                <CircularProgress />
              </Box>
            ) : (
              <>
                <Paper sx={{ p: 3, mb: 4, boxShadow: 2 }}>
                  <Typography variant="h6" gutterBottom>
                    AI Agents Configuration
                  </Typography>
                  <Typography variant="body2" color="textSecondary" paragraph>
                    Configure the AI providers and models used by each AI agent in the system. Changes will be applied to new projects.
                  </Typography>
                  <AIModelSelector 
                    initialConfig={aiConfig} 
                    onConfigUpdate={(newConfig) => {
                      updateAIConfig(newConfig);
                      setAIConfig(newConfig);
                    }}
                  />
                </Paper>
              </>
            )}
          </Container>
        );
        
      default:
        return null;
    }
  };
  
  // Render new project dialog
  const renderNewProjectDialog = () => {
    return (
      <Dialog open={newProjectDialog} onClose={() => setNewProjectDialog(false)} maxWidth="md" fullWidth>
        <DialogTitle>Create New Project</DialogTitle>
        <DialogContent>
          <DialogContentText sx={{ mb: 2 }}>
            Fill in the details below to create a new AI-powered project.
          </DialogContentText>
          
          <Grid container spacing={2}>
            <Grid item xs={12}>
              <TextField
                autoFocus
                margin="dense"
                id="name"
                name="name"
                label="Project Name"
                type="text"
                fullWidth
                variant="outlined"
                value={newProject.name}
                onChange={handleInputChange}
                required
              />
            </Grid>
            <Grid item xs={12}>
              <TextField
                margin="dense"
                id="description"
                name="description"
                label="Project Description"
                type="text"
                fullWidth
                variant="outlined"
                multiline
                rows={3}
                value={newProject.description}
                onChange={handleInputChange}
                required
              />
            </Grid>
            <Grid item xs={12}>
              <TextField
                margin="dense"
                id="repository_url"
                name="repository_url"
                label="Repository URL (optional)"
                type="url"
                fullWidth
                variant="outlined"
                value={newProject.repository_url}
                onChange={handleInputChange}
                placeholder="https://github.com/username/repository"
              />
            </Grid>
            <Grid item xs={12}>
              <TextField
                margin="dense"
                id="idea_md"
                name="idea_md"
                label="Project Idea (Markdown)"
                type="text"
                fullWidth
                variant="outlined"
                multiline
                rows={6}
                value={newProject.idea_md}
                onChange={handleInputChange}
                placeholder="# Project Idea\n\nDescribe your project idea in markdown format...\n\n## Features\n\n- Feature 1\n- Feature 2"
                required
              />
            </Grid>
          </Grid>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setNewProjectDialog(false)}>Cancel</Button>
          <Button onClick={handleCreateProject} variant="contained" color="primary">
            Create Project
          </Button>
        </DialogActions>
      </Dialog>
    );
  };

  return (
    <ThemeProvider theme={darkTheme}>
      <CssBaseline />
      <Box sx={{ display: 'flex', flexDirection: 'column', minHeight: '100vh' }}>
        <AppBar position="static">
          <Toolbar>
            <IconButton
              color="inherit"
              aria-label="open drawer"
              edge="start"
              onClick={handleDrawerToggle}
              sx={{ mr: 2 }}
            >
              <MenuIcon />
            </IconButton>
            <Typography variant="h6" component="div" sx={{ flexGrow: 1 }}>
              AI-SYSTEMS Platform
            </Typography>
            <IconButton color="inherit" onClick={handleRefresh}>
              <RefreshIcon />
            </IconButton>
            <IconButton color="inherit" onClick={() => setNewProjectDialog(true)}>
              <AddIcon />
            </IconButton>
          </Toolbar>
          <Tabs 
            value={currentTab} 
            onChange={handleTabChange} 
            aria-label="navigation tabs"
            centered
            sx={{ bgcolor: 'background.paper' }}
          >
            <Tab icon={<FolderIcon />} label="Projects" />
            <Tab icon={<TaskIcon />} label="Project Details" disabled={!selectedProject} />
            <Tab icon={<DashboardIcon />} label="System Status" />
            <Tab icon={<MonitorIcon />} label="Monitoring" />
            <Tab icon={<SettingsIcon />} label="AI Settings" />
          </Tabs>
        </AppBar>
        
        <Drawer
          variant="temporary"
          open={drawerOpen}
          onClose={handleDrawerToggle}
          sx={{
            '& .MuiDrawer-paper': { width: 240, boxSizing: 'border-box' },
          }}
        >
          <List>
            <ListItem button onClick={() => { setCurrentTab(0); setDrawerOpen(false); }}>
              <ListItemIcon><FolderIcon /></ListItemIcon>
              <ListItemText primary="Projects" />
            </ListItem>
            <ListItem button onClick={() => { setCurrentTab(1); setDrawerOpen(false); }} disabled={!selectedProject}>
              <ListItemIcon><TaskIcon /></ListItemIcon>
              <ListItemText primary="Project Details" />
            </ListItem>
            <ListItem button onClick={() => { setCurrentTab(2); setDrawerOpen(false); }}>
              <ListItemIcon><DashboardIcon /></ListItemIcon>
              <ListItemText primary="System Status" />
            </ListItem>
            <ListItem button onClick={() => { setCurrentTab(3); setDrawerOpen(false); }}>
              <ListItemIcon><MonitorIcon /></ListItemIcon>
              <ListItemText primary="Monitoring" />
            </ListItem>
            <ListItem button onClick={() => { setCurrentTab(4); setDrawerOpen(false); }}>
              <ListItemIcon><SettingsIcon /></ListItemIcon>
              <ListItemText primary="AI Settings" />
            </ListItem>
            <Divider />
          </List>
        </Drawer>
        
        <Box component="main" sx={{ flexGrow: 1 }}>
          {renderTabContent()}
        </Box>
        
        {renderNewProjectDialog()}
        
        <Snackbar
          open={notification.open}
          autoHideDuration={6000}
          onClose={handleCloseNotification}
          message={notification.message}
        />
      </Box>
    </ThemeProvider>
  );
}

export default App;
