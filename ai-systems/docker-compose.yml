services:
  ai-core:
    build: ./ai-core
    ports:
      - "${AI_CORE_PORT:-7861}:7861"
    environment:
      - PYTHONPATH=/app
    env_file:
      - ./.env
    volumes:
      - ./ai-core:/app
      - logs_volume:/app/logs
    networks:
      - backend_network
      - db_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7861/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s
    profiles:
      - ai
      - full

  development-agents:
    build: ./development-agents
    ports:
      - "${DEV_AGENTS_PORT:-7862}:7862"
    environment:
      - PYTHONPATH=/app
    env_file:
      - ./.env
    volumes:
      - ./development-agents:/app
      - logs_volume:/app/logs
    networks:
      - backend_network
      - db_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7862/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s
    profiles:
      - ai
      - full

  project-manager:
    build: ./project-manager
    ports:
      - "${PROJECT_MANAGER_PORT:-7863}:7863"
    environment:
      - PYTHONPATH=/app
    env_file:
      - ./.env
    volumes:
      - ./project-manager:/app
      - logs_volume:/app/logs
    networks:
      - backend_network
      - db_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7863/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s
    profiles:
      - management
      - full

  cmp:
    build: ./cmp
    ports:
      - "${CMP_PORT:-7864}:7864"
    environment:
      - PYTHONPATH=/app
    env_file:
      - ./.env
    volumes:
      - ./cmp:/app
      - logs_volume:/app/logs
    networks:
      - backend_network
      - db_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7864/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s
    profiles:
      - monitoring
      - full

  web-frontend:
    build: ./web/frontend
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    env_file:
      - ./.env
    volumes:
      - ./web/frontend:/app
    networks:
      - frontend_network
    depends_on:
      web-backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 15s
    profiles:
      - web
      - full

  web-backend:
    build: ./web/backend
    ports:
      - "${WEB_PORT:-8001}:8001"
    environment:
      - PYTHONPATH=/app
    env_file:
      - ./.env
    volumes:
      - ./web/backend:/app
      - logs_volume:/app/logs
    networks:
      - frontend_network
      - backend_network
      - db_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s
    profiles:
      - web
      - full

  git-service:
    build: ./git-service
    ports:
      - "${GIT_SERVICE_PORT:-7865}:7865"
    environment:
      - PYTHONPATH=/app
    env_file:
      - ./.env
    volumes:
      - ./git-service:/app
      - ${REPOSITORY_PATH:-~/workspace/AI-SYSTEMS-REPO}:/root/workspace/AI-SYSTEMS-REPO
      - logs_volume:/app/logs
    networks:
      - backend_network
      - db_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7865/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s
    profiles:
      - management
      - full

  postgres:
    image: postgres:14
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${DB_NAME:-ai_systems}
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - db_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-ai_systems}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    profiles:
      - infrastructure
      - ai
      - web
      - management
      - monitoring
      - full

  redis:
    image: redis:6
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - db_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    profiles:
      - infrastructure
      - ai
      - web
      - management
      - monitoring
      - full

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER:-guest}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD:-guest}
    networks:
      - db_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    profiles:
      - infrastructure
      - ai
      - web
      - management
      - monitoring
      - full

# Define custom networks for better isolation and security
networks:
  # Frontend network for web services
  frontend_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/24
  
  # Backend network for application services
  backend_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.28.1.0/24
  
  # Database network for data services
  db_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.28.2.0/24

volumes:
  # Database volumes with explicit configuration
  postgres_data:
    driver: local
    driver_opts:
      type: none
      device: ${POSTGRES_DATA_PATH:-./data/postgres}
      o: bind
  redis_data:
    driver: local
    driver_opts:
      type: none
      device: ${REDIS_DATA_PATH:-./data/redis}
      o: bind
  rabbitmq_data:
    driver: local
    driver_opts:
      type: none
      device: ${RABBITMQ_DATA_PATH:-./data/rabbitmq}
      o: bind
  # Shared logs volume for centralized logging
  logs_volume:
    driver: local
    driver_opts:
      type: none
      device: ${LOGS_PATH:-./logs}
      o: bind
